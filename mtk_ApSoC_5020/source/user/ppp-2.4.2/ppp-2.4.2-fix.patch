--- ppp-2.4.2/pppd/plugins/rp-pppoe/discovery.c.fix	2004-06-17 16:43:43.191723185 +0200
+++ ppp-2.4.2/pppd/plugins/rp-pppoe/discovery.c	2004-06-17 16:43:45.907350301 +0200
@@ -13,6 +13,8 @@
 
 #include "pppoe.h"
 
+void warn __P((char *, ...));   /* log a warning message */
+
 #ifdef HAVE_SYSLOG_H
 #include <syslog.h>
 #endif
--- ppp-2.4.2/pppd/tty.c.fix	2004-01-13 05:17:59.000000000 +0100
+++ ppp-2.4.2/pppd/tty.c	2004-06-17 16:13:28.955650804 +0200
@@ -512,7 +512,9 @@
 {
 	char *connector;
 	int fdflags;
+#ifndef __linux__
 	struct stat statbuf;
+#endif
 	char numbuf[16];
 
 	/*
--- ppp-2.4.2/pppd/ipv6cp.c.fix	2004-01-13 04:59:37.000000000 +0100
+++ ppp-2.4.2/pppd/ipv6cp.c	2004-06-17 16:16:04.377345945 +0200
@@ -151,6 +151,7 @@
  */
 
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 #include <netdb.h>
@@ -1061,7 +1062,9 @@
     return (rc);			/* Return final code */
 }
 
-
+#if defined(SOL2) || defined(__linux__)
+int ether_to_eui64(eui64_t *p_eui64);
+#endif
 /*
  * ipv6_check_options - check that any IP-related options are OK,
  * and assign appropriate defaults.
--- ppp-2.4.2/include/linux/if_pppox.h.fix	2001-12-15 01:34:24.000000000 +0100
+++ ppp-2.4.2/include/linux/if_pppox.h	2004-06-17 16:11:32.162659245 +0200
@@ -18,7 +18,7 @@
 
 
 #include <asm/types.h>
-#include <asm/byteorder.h>
+#include <endian.h>
 
 #ifdef  __KERNEL__
 #include <linux/if_ether.h>
@@ -97,10 +97,10 @@
 #define PTT_GEN_ERR  	__constant_htons(0x0203)
 
 struct pppoe_hdr {
-#if defined(__LITTLE_ENDIAN_BITFIELD)
+#if __BYTE_ORDER == __LITTLE_ENDIAN
 	__u8 ver : 4;
 	__u8 type : 4;
-#elif defined(__BIG_ENDIAN_BITFIELD)
+#elif __BYTE_ORDER == __BIG_ENDIAN
 	__u8 type : 4;
 	__u8 ver : 4;
 #else
--- ppp-2.4.2/pppdump/deflate.c.fix	2004-06-17 16:58:32.991307502 +0200
+++ ppp-2.4.2/pppdump/deflate.c	2004-06-17 17:00:24.408979423 +0200
@@ -38,7 +38,9 @@
 
 #include <sys/types.h>
 #include <stddef.h>
+#include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include "ppp_defs.h"
 #include "ppp-comp.h"
 #include "zlib.h"
@@ -235,8 +237,8 @@
 {
     struct deflate_state *state = (struct deflate_state *) arg;
     u_char *rptr, *wptr;
-    int rlen, olen, ospace;
-    int seq, i, flush, r, decode_proto;
+    int rlen, olen;
+    int seq, r;
 
     rptr = mi;
     if (*rptr == 0)
--- ppp-2.4.2/pppdump/bsd-comp.c.fix	2004-06-17 16:53:52.680872972 +0200
+++ ppp-2.4.2/pppdump/bsd-comp.c	2004-06-17 16:58:07.013881369 +0200
@@ -43,7 +43,9 @@
 
 #include <sys/types.h>
 #include <stddef.h>
+#include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include "ppp_defs.h"
 #include "ppp-comp.h"
 
@@ -381,7 +383,7 @@
 	|| options[0] != CI_BSD_COMPRESS || options[1] != CILEN_BSD_COMPRESS
 	|| BSD_VERSION(options[2]) != BSD_CURRENT_VERSION
 	|| BSD_NBITS(options[2]) != db->maxbits
-	|| decomp && db->lens == NULL)
+	|| (decomp && db->lens == NULL))
 	return 0;
 
     if (decomp) {
@@ -554,11 +556,11 @@
     u_int n_bits = db->n_bits;
     u_int tgtbitno = 32-n_bits;	/* bitno when we have a code */
     struct bsd_dict *dictp;
-    int explen, i, seq, len;
+    int explen, seq, len;
     u_int incode, oldcode, finchar;
     u_char *p, *rptr, *wptr;
     int ilen;
-    int dlen, space, codelen, extra;
+    int dlen=0, codelen, extra;
 
     rptr = cmsg;
     if (*rptr == 0)
@@ -614,7 +616,7 @@
 	}
 
 	if (incode > max_ent + 2 || incode > db->maxmaxcode
-	    || incode > max_ent && oldcode == CLEAR) {
+	    || (incode > max_ent && oldcode == CLEAR)) {
 	    if (db->debug) {
 		printf("bsd_decomp%d: bad code 0x%x oldcode=0x%x ",
 		       db->unit, incode, oldcode);
--- ppp-2.4.2/pppdump/pppdump.c.fix	2004-06-17 16:44:38.175172998 +0200
+++ ppp-2.4.2/pppdump/pppdump.c	2004-06-17 16:52:51.795250137 +0200
@@ -34,6 +34,7 @@
  * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 #include <stdio.h>
+#include <stdlib.h>
 #include <unistd.h>
 #include <time.h>
 #include <sys/types.h>
@@ -53,6 +54,12 @@
 extern int optind;
 extern char *optarg;
 
+void dumplog(FILE *);
+void dumpppp(FILE *);
+void show_time(FILE *, int);
+
+
+int
 main(ac, av)
     int ac;
     char **av;
@@ -105,7 +112,7 @@
     exit(0);
 }
 
-dumplog(f)
+void dumplog(f)
     FILE *f;
 {
     int c, n, k, col;
@@ -183,7 +190,7 @@
 	    show_time(f, c);
 	    break;
 	default:
-	    printf("?%.2x\n");
+	    printf("?%.2x\n", c);
 	}
     }
 }
@@ -244,7 +251,9 @@
 
 unsigned char dbuf[8192];
 
-dumpppp(f)
+void handle_ccp(struct pkt *, u_char *, int);
+
+void dumpppp(f)
     FILE *f;
 {
     int c, n, k;
@@ -412,7 +421,7 @@
 	    show_time(f, c);
 	    break;
 	default:
-	    printf("?%.2x\n");
+	    printf("?%.2x\n", c);
 	}
     }
 }
@@ -429,7 +438,7 @@
     NULL
 };
 
-handle_ccp(cp, dp, len)
+void handle_ccp(cp, dp, len)
     struct pkt *cp;
     u_char *dp;
     int len;
@@ -485,7 +494,7 @@
     }
 }
 
-show_time(f, c)
+void show_time(f, c)
     FILE *f;
     int c;
 {
--- ppp-2.4.2/chat/chat.c.fix	2003-03-30 10:23:48.000000000 +0200
+++ ppp-2.4.2/chat/chat.c	2004-06-17 16:33:22.455951861 +0200
@@ -213,7 +213,7 @@
 void *copy_of __P((char *s));
 char *grow __P((char *s, char **p, size_t len));
 void usage __P((void));
-void logf __P((const char *fmt, ...));
+void msgf __P((const char *fmt, ...));
 void fatal __P((int code, const char *fmt, ...));
 SIGTYPE sigalrm __P((int signo));
 SIGTYPE sigint __P((int signo));
@@ -495,7 +495,7 @@
 /*
  * Send a message to syslog and/or stderr.
  */
-void logf __V((const char *fmt, ...))
+void msgf __V((const char *fmt, ...))
 {
     va_list args;
 
@@ -558,7 +558,7 @@
 	fatal(2, "Can't set file mode flags on stdin: %m");
 
     if (verbose)
-	logf("alarm");
+	msgf("alarm");
 }
 
 void unalarm()
@@ -1001,9 +1001,9 @@
  * The expectation did not occur. This is terminal.
  */
     if (fail_reason)
-	logf("Failed (%s)", fail_reason);
+	msgf("Failed (%s)", fail_reason);
     else
-	logf("Failed");
+	msgf("Failed");
     terminate(exit_code);
 }
 
@@ -1079,7 +1079,7 @@
 	abort_string[n_aborts++] = s1;
 
 	if (verbose)
-	    logf("abort on (%v)", s);
+	    msgf("abort on (%v)", s);
 	return;
     }
 
@@ -1105,7 +1105,7 @@
 		pack++;
 		n_aborts--;
 		if (verbose)
-		    logf("clear abort on (%v)", s);
+		    msgf("clear abort on (%v)", s);
 	    }
 	}
         free(s1);
@@ -1129,7 +1129,7 @@
 	report_string[n_reports++] = s1;
 	
 	if (verbose)
-	    logf("report (%v)", s);
+	    msgf("report (%v)", s);
 	return;
     }
 
@@ -1155,7 +1155,7 @@
 		pack++;
 		n_reports--;
 		if (verbose)
-		    logf("clear report (%v)", s);
+		    msgf("clear report (%v)", s);
 	    }
 	}
         free(s1);
@@ -1173,7 +1173,7 @@
 	    timeout = DEFAULT_CHAT_TIMEOUT;
 
 	if (verbose)
-	    logf("timeout set to %d seconds", timeout);
+	    msgf("timeout set to %d seconds", timeout);
 
 	return;
     }
@@ -1236,7 +1236,7 @@
 	return ((int)c & 0x7F);
 
     default:
-	logf("warning: read() on stdin returned %d", status);
+	msgf("warning: read() on stdin returned %d", status);
 
     case -1:
 	if ((status = fcntl(0, F_GETFL, 0)) == -1)
@@ -1264,7 +1264,7 @@
 	return (0);
 	
     default:
-	logf("warning: write() on stdout returned %d", status);
+	msgf("warning: write() on stdout returned %d", status);
 	
     case -1:
 	if ((status = fcntl(0, F_GETFL, 0)) == -1)
@@ -1286,9 +1286,9 @@
 
 	if (verbose) {
 	    if (errno == EINTR || errno == EWOULDBLOCK)
-		logf(" -- write timed out");
+		msgf(" -- write timed out");
 	    else
-		logf(" -- write failed: %m");
+		msgf(" -- write failed: %m");
 	}
 	return (0);
     }
@@ -1303,9 +1303,9 @@
 
     if (verbose) {
 	if (quiet)
-	    logf("send (??????)");
+	    msgf("send (??????)");
 	else
-	    logf("send (%v)", s);
+	    msgf("send (%v)", s);
     }
 
     alarm(timeout); alarmed = 0;
@@ -1392,17 +1392,17 @@
     minlen = (len > sizeof(fail_buffer)? len: sizeof(fail_buffer)) - 1;
 
     if (verbose)
-	logf("expect (%v)", string);
+	msgf("expect (%v)", string);
 
     if (len > STR_LEN) {
-	logf("expect string is too long");
+	msgf("expect string is too long");
 	exit_code = 1;
 	return 0;
     }
 
     if (len == 0) {
 	if (verbose)
-	    logf("got it");
+	    msgf("got it");
 	return (1);
     }
 
@@ -1416,16 +1416,16 @@
 	    echo_stderr(c);
 	if (verbose && c == '\n') {
 	    if (s == logged)
-		logf("");	/* blank line */
+		msgf("");	/* blank line */
 	    else
-		logf("%0.*v", s - logged, logged);
+		msgf("%0.*v", s - logged, logged);
 	    logged = s + 1;
 	}
 
 	*s++ = c;
 
 	if (verbose && s >= logged + 80) {
-	    logf("%0.*v", s - logged, logged);
+	    msgf("%0.*v", s - logged, logged);
 	    logged = s;
 	}
 
@@ -1470,8 +1470,8 @@
 	    strncmp(s - len, string, len) == 0) {
 	    if (verbose) {
 		if (s > logged)
-		    logf("%0.*v", s - logged, logged);
-		logf(" -- got it\n");
+		    msgf("%0.*v", s - logged, logged);
+		msgf(" -- got it\n");
 	    }
 
 	    alarm(0);
@@ -1484,8 +1484,8 @@
 		strncmp(s - abort_len, abort_string[n], abort_len) == 0) {
 		if (verbose) {
 		    if (s > logged)
-			logf("%0.*v", s - logged, logged);
-		    logf(" -- failed");
+			msgf("%0.*v", s - logged, logged);
+		    msgf(" -- failed");
 		}
 
 		alarm(0);
@@ -1499,7 +1499,7 @@
 	if (s >= end) {
 	    if (logged < s - minlen) {
 		if (verbose)
-		    logf("%0.*v", s - logged, logged);
+		    msgf("%0.*v", s - logged, logged);
 		logged = s;
 	    }
 	    s -= minlen;
@@ -1509,16 +1509,16 @@
 	}
 
 	if (alarmed && verbose)
-	    logf("warning: alarm synchronization problem");
+	    msgf("warning: alarm synchronization problem");
     }
 
     alarm(0);
     
     if (verbose && printed) {
 	if (alarmed)
-	    logf(" -- read timed out");
+	    msgf(" -- read timed out");
 	else
-	    logf(" -- read failed: %m");
+	    msgf(" -- read failed: %m");
     }
 
     exit_code = 3;
--- ppp-2.4.2/pppd/chap_ms.c	2003-11-18 11:42:56.000000000 +0100
+++ ppp-cvs-20040427/pppd/chap_ms.c	2004-04-14 04:40:21.000000000 +0200
@@ -74,7 +74,7 @@
  *
  */
 
-#define RCSID	"$Id: //WIFI_SOC/MP/SDK_5_0_0_0/RT288x_SDK/source/user/ppp-2.4.2/ppp-2.4.2-fix.patch#1 $"
+#define RCSID	"$Id: //WIFI_SOC/MP/SDK_5_0_0_0/RT288x_SDK/source/user/ppp-2.4.2/ppp-2.4.2-fix.patch#1 $"
 
 #ifdef CHAPMS
 
@@ -164,9 +164,11 @@
 chapms_generate_challenge(unsigned char *challenge)
 {
 	*challenge++ = 8;
+#ifdef DEBUGMPPEKEY
 	if (mschap_challenge && strlen(mschap_challenge) == 8)
 		memcpy(challenge, mschap_challenge, 8);
 	else
+#endif
 		random_bytes(challenge, 8);
 }
 
@@ -174,9 +176,11 @@
 chapms2_generate_challenge(unsigned char *challenge)
 {
 	*challenge++ = 16;
+#ifdef DEBUGMPPEKEY
 	if (mschap_challenge && strlen(mschap_challenge) == 16)
 		memcpy(challenge, mschap_challenge, 16);
 	else
+#endif
 		random_bytes(challenge, 16);
 }
 
@@ -207,7 +211,7 @@
 #endif
 
 	/* Generate the expected response. */
-	ChapMS(challenge, secret, secret_len, &md);
+	ChapMS(challenge, (char *)secret, secret_len, &md);
 
 #ifdef MSLANMAN
 	/* Determine which part of response to verify against */
@@ -250,8 +254,8 @@
 
 	/* Generate the expected response and our mutual auth. */
 	ChapMS2(challenge, rmd->PeerChallenge, name,
-		secret, secret_len, &md,
-		saresponse, MS_CHAP2_AUTHENTICATOR);
+		(char *)secret, secret_len, &md,
+		(unsigned char *)saresponse, MS_CHAP2_AUTHENTICATOR);
 
 	/* compare MDs and send the appropriate status */
 	/*
@@ -326,8 +330,13 @@
 {
 	challenge++;	/* skip length, should be 16 */
 	*response++ = MS_CHAP2_RESPONSE_LEN;
-	ChapMS2(challenge, mschap2_peer_challenge, our_name,
-		secret, secret_len,
+	ChapMS2(challenge,
+#ifdef DEBUGMPPEKEY
+		mschap2_peer_challenge,
+#else
+		NULL,
+#endif
+		our_name, secret, secret_len,
 		(MS_Chap2Response *) response, private,
 		MS_CHAP2_AUTHENTICATEE);
 }
@@ -335,7 +344,8 @@
 static int
 chapms2_check_success(unsigned char *msg, int len, unsigned char *private)
 {
-	if ((len < MS_AUTH_RESPONSE_LENGTH + 2) || strncmp(msg, "S=", 2)) {
+	if ((len < MS_AUTH_RESPONSE_LENGTH + 2) ||
+	    strncmp((char *)msg, "S=", 2) != 0) {
 		/* Packet does not start with "S=" */
 		error("MS-CHAPv2 Success packet is badly formed.");
 		return 0;
@@ -351,7 +361,7 @@
 	/* Authenticator Response matches. */
 	msg += MS_AUTH_RESPONSE_LENGTH; /* Eat it */
 	len -= MS_AUTH_RESPONSE_LENGTH;
-	if ((len >= 3) && !strncmp(msg, " M=", 3)) {
+	if ((len >= 3) && !strncmp((char *)msg, " M=", 3)) {
 		msg += 3; /* Eat the delimiter */
 	} else if (len) {
 		/* Packet has extra text which does not begin " M=" */
@@ -477,7 +487,7 @@
     SHA1_Init(&sha1Context);
     SHA1_Update(&sha1Context, PeerChallenge, 16);
     SHA1_Update(&sha1Context, rchallenge, 16);
-    SHA1_Update(&sha1Context, user, strlen(user));
+    SHA1_Update(&sha1Context, (unsigned char *)user, strlen(user));
     SHA1_Final(sha1Hash, &sha1Context);
 
     BCOPY(sha1Hash, Challenge, 8);
@@ -512,7 +522,7 @@
     MD4_CTX		md4Context;
 
     MD4Init(&md4Context);
-    MD4Update(&md4Context, secret, mdlen);
+    MD4Update(&md4Context, (unsigned char *)secret, mdlen);
     MD4Final(hash, &md4Context);
 
 }
@@ -526,7 +536,7 @@
 
     /* Hash the Unicode version of the secret (== password). */
     ascii2unicode(secret, secret_len, unicodePassword);
-    NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
+    NTPasswordHash((char *)unicodePassword, secret_len * 2, PasswordHash);
 
     ChallengeResponse(rchallenge, PasswordHash, NTResponse);
 }
@@ -539,11 +549,12 @@
     u_char	PasswordHash[MD4_SIGNATURE_SIZE];
     u_char	Challenge[8];
 
-    ChallengeHash(PeerChallenge, rchallenge, username, Challenge);
+    ChallengeHash(PeerChallenge, (unsigned char *)rchallenge, username,
+		  Challenge);
 
     /* Hash the Unicode version of the secret (== password). */
     ascii2unicode(secret, secret_len, unicodePassword);
-    NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
+    NTPasswordHash((char *)unicodePassword, secret_len * 2, PasswordHash);
 
     ChallengeResponse(Challenge, PasswordHash, NTResponse);
 }
@@ -603,8 +614,9 @@
 
     /* Hash (x2) the Unicode version of the secret (== password). */
     ascii2unicode(secret, secret_len, unicodePassword);
-    NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
-    NTPasswordHash(PasswordHash, sizeof(PasswordHash), PasswordHashHash);
+    NTPasswordHash((char *)unicodePassword, secret_len * 2, PasswordHash);
+    NTPasswordHash((char *)PasswordHash, sizeof(PasswordHash),
+		   PasswordHashHash);
 
     SHA1_Init(&sha1Context);
     SHA1_Update(&sha1Context, PasswordHashHash, sizeof(PasswordHashHash));
@@ -622,7 +634,7 @@
 
     /* Convert to ASCII hex string. */
     for (i = 0; i < MAX((MS_AUTH_RESPONSE_LENGTH / 2), sizeof(Digest)); i++)
-	sprintf(&authResponse[i * 2], "%02X", Digest[i]);
+	sprintf((char *)&authResponse[i * 2], "%02X", Digest[i]);
 }
 
 
@@ -825,7 +837,7 @@
 	      sizeof(response->PeerChallenge));
 
     /* Generate the NT-Response */
-    ChapMS2_NT(rchallenge, response->PeerChallenge, user,
+    ChapMS2_NT((char *)rchallenge, response->PeerChallenge, user,
 	       secret, secret_len, response->NTResp);
 
     /* Generate the Authenticator Response. */
Ensure that the fd returned by the connect method is closed before
running external programs.

http://article.gmane.org/gmane.linux.ppp/1371

--- ppp.orig/pppd/main.c	2004-07-12 12:55:30.000000000 +0200
+++ ppp/pppd/main.c	2004-07-12 12:55:25.000000000 +0200
@@ -1646,6 +1646,8 @@ run_program(prog, args, must_exist, done
     closelog();
     if (the_channel->close)
 	(*the_channel->close)();
+    else
+	close(devfd);
 
     /* Don't pass handles to the PPP device, even by accident. */
     dup2(fd_devnull, 0);
To: md@linux.it, mjt@corpit.ru
Subject: pppd-auth-hook.patch
Message-Id: <20040604231517.3E9AD11DC4@paltus.tls.msk.ru>
Date: Sat,  5 Jun 2004 03:15:17 +0400 (MSD)
From: mjt@corpit.ru (Michael Tokarev)

The patch below fixes pppd segfault when using auth_hook that sets
options for the user (use-after-free problem).

/mjt

--- ppp/pppd/auth.c.orig	Mon Jun 23 18:12:04 2003
+++ ppp/pppd/auth.c	Sat Jun  5 03:11:36 2004
@@ -1251,14 +1251,14 @@
     if (pap_auth_hook) {
 	ret = (*pap_auth_hook)(user, passwd, msg, &addrs, &opts);
 	if (ret >= 0) {
+	    /* note: set_allowed_addrs() saves opts (but not addrs): don't free it! */
 	    if (ret)
 		set_allowed_addrs(unit, addrs, opts);
-	    BZERO(passwd, sizeof(passwd));
+	    else if (opts != 0)
+		free_wordlist(opts);
 	    if (addrs != 0)
 		free_wordlist(addrs);
-	    if (opts != 0) {
-		free_wordlist(opts);
-	    }
+	    BZERO(passwd, sizeof(passwd));
 	    return ret? UPAP_AUTHACK: UPAP_AUTHNAK;
 	}
     }

